@Library('dig-apps-shared-lib') _

pipeline {
    agent any

    environment {
        DB_URL = 'jdbc:mysql://mysql-service:3306/springfoyer'
        DB_USER = credentials('mysql-username')
        DB_PASSWORD = credentials('mysql-password')
        SONAR_HOST = 'http://172.201.153.226:9000'
        SONAR_PROJECT_KEY = 'springfoyer'
        SONAR_TOKEN = 'squ_db5cca187329fc690c3474a578fb7357e5f4f807'
        TRIVY_TEMPLATE_URL = 'https://raw.githubusercontent.com/Ferdali10/projectSpring/master/advanced-html.tpl'
        
        // Docker
        DOCKER_IMAGE = 'dalifer/springfoyer'
        DOCKER_REGISTRY = 'registry.hub.docker.com'
        
        // Kubernetes
        K8S_MANIFEST_DIR = 'k8s'
        KUBECONFIG_PATH = '/var/lib/jenkins/.kube/config'
        
        // URLs de test corrig√©es
        APP_BASE_URL = 'http://10.0.4.4:30080'
        HEALTH_ENDPOINT = "${APP_BASE_URL}/actuator/health"
        READINESS_ENDPOINT = "${APP_BASE_URL}/actuator/health/readiness"
    }

    stages {
        stage('üîÅ Clone du d√©p√¥t') {
            steps {
                script {
                    retry(3) {
                        timeout(time: 10, unit: 'MINUTES') {
                            checkout scm: [
                                $class: 'GitSCM',
                                branches: [[name: "*/master"]],
                                userRemoteConfigs: [[
                                    url: "https://github.com/Ferdali10/projectSpring.git",
                                    credentialsId: "github-pat"
                                ]],
                                extensions: [
                                    [$class: 'CloneOption', depth: 1, shallow: true, timeout: 10],
                                    [$class: 'CleanBeforeCheckout']
                                ]
                            ]
                        }
                    }
                    echo "‚úÖ Clone r√©ussi"
                }
            }
        }

        stage('üèóÔ∏è Build Maven') {
            steps {
                script {
                    withEnv([
                        "SPRING_DATASOURCE_URL=${env.DB_URL}",
                        "SPRING_DATASOURCE_USERNAME=${env.DB_USER}",
                        "SPRING_DATASOURCE_PASSWORD=${env.DB_PASSWORD}"
                    ]) {
                        sh 'chmod +x ./mvnw'
                        sh './mvnw clean package -DskipTests -Dspring.profiles.active=prod'

                        def jarFiles = sh(
                            script: 'find target -name "*.jar" -type f ! -name "*-sources.jar" ! -name "*-javadoc.jar"',
                            returnStdout: true
                        ).trim()

                        if (!jarFiles) {
                            error "‚ùå Aucun JAR g√©n√©r√©. V√©rifiez les logs Maven."
                        }

                        env.JAR_FILE = jarFiles.split('\n')[0].replaceAll('target/', '')
                        echo "‚úÖ JAR principal: ${env.JAR_FILE}"
                        archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
                    }
                }
            }
        }

        stage('üê≥ Build & Push Docker') {
            steps {
                script {
                    if (!env.JAR_FILE) error "‚ùå JAR non d√©fini"

                    // Dockerfile am√©lior√© avec configuration Actuator
                    writeFile file: 'Dockerfile', text: """
FROM eclipse-temurin:17-jre-jammy

# Installation de curl pour les health checks
RUN apt-get update && apt-get install -y curl && rm -rf /var/lib/apt/lists/*

WORKDIR /app
COPY target/${env.JAR_FILE} app.jar

# Configuration des endpoints Actuator via variables d'environnement
ENV MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,prometheus,metrics
ENV MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
ENV MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED=true
ENV MANAGEMENT_HEALTH_READINESS_STATE_ENABLED=true
ENV MANAGEMENT_HEALTH_LIVENESS_STATE_ENABLED=true

EXPOSE 8080

# Health check am√©lior√©
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\
  CMD curl -f http://localhost:8080/actuator/health || exit 1

ENTRYPOINT ["java", "-jar", "app.jar"]
"""

                    sh "docker build -t ${env.DOCKER_IMAGE} ."
                    sh "docker tag ${env.DOCKER_IMAGE} ${env.DOCKER_IMAGE}:latest"
                    sh "docker tag ${env.DOCKER_IMAGE} ${env.DOCKER_IMAGE}:${env.BUILD_NUMBER}"

                    withCredentials([usernamePassword(credentialsId: 'docker-hub-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                            export DOCKER_CONFIG=/tmp/.docker
                            mkdir -p \$DOCKER_CONFIG
                            echo '{"credsStore":""}' > \$DOCKER_CONFIG/config.json
                            echo "\${DOCKER_PASSWORD}" | docker login -u "\${DOCKER_USER}" --password-stdin
                            docker push ${env.DOCKER_IMAGE}:latest
                            docker push ${env.DOCKER_IMAGE}:${env.BUILD_NUMBER}
                            docker logout
                            rm -rf /tmp/.docker
                        """
                    }

                    env.DOCKER_IMAGE_FULL = "${env.DOCKER_IMAGE}:latest"
                    echo "‚úÖ Docker build & push termin√©: ${env.DOCKER_IMAGE_FULL}"
                }
            }
        }

        stage('üîç Analyse SonarQube') {
            steps {
                script {
                    sh "curl -f -s ${env.SONAR_HOST}/api/system/status || echo '‚ö†Ô∏è SonarQube non accessible'"

                    sh """
                        export MAVEN_OPTS="-Djava.net.preferIPv4Stack=true"
                        ./mvnw sonar:sonar \
                        -Dsonar.projectKey=${env.SONAR_PROJECT_KEY} \
                        -Dsonar.host.url=http://10.0.2.4:9000 \
                        -Dsonar.login=${env.SONAR_TOKEN}
                    """

                    timeout(time: 15, unit: 'MINUTES') {
                        def status = sh(
                            script: """curl -s -u ${env.SONAR_TOKEN}: http://10.0.2.4:9000/api/qualitygates/project_status?projectKey=${env.SONAR_PROJECT_KEY} | jq -r '.projectStatus.status'""",
                            returnStdout: true
                        ).trim()
                        
                        echo "üü¢ Sonar Quality Gate: ${status}"
                        env.SONAR_QUALITY_GATE_STATUS = status
                        
                        if (status != 'OK') {
                            error "üö® Sonar Quality Gate failed: ${status}"
                        }
                    }
                }
            }
        }

        stage('üìä G√©n√©ration Rapport SonarQube') {
            steps {
                script {
                    echo "üìä G√©n√©ration du rapport SonarQube..."
                    generateSonarReport([
                        projectKey: env.SONAR_PROJECT_KEY,
                        sonarHost: 'http://172.201.153.226:9000',
                        sonarToken: env.SONAR_TOKEN,
                        qualityGate: [
                            status: env.SONAR_QUALITY_GATE_STATUS ?: 'UNKNOWN'
                        ],
                        projectUrl: 'http://172.201.153.226:9000/projects'
                    ])
                    echo "‚úÖ Rapport SonarQube g√©n√©r√© avec succ√®s"
                }
            }
        }

        stage('üîí Analyse Trivy') {
            steps {
                script {
                    def jsonOutput = 'trivy-report.json'
                    def htmlOutput = 'trivy-report.html'
                    sh """
                        curl -sL ${env.TRIVY_TEMPLATE_URL} -o html-advanced.tpl
                        trivy image --download-db-only
                        trivy image --severity HIGH,CRITICAL --ignore-unfixed --format json -o ${jsonOutput} ${env.DOCKER_IMAGE_FULL}
                        trivy image --severity HIGH,CRITICAL --ignore-unfixed --format template --template '@html-advanced.tpl' -o ${htmlOutput} ${env.DOCKER_IMAGE_FULL}
                    """
                    archiveArtifacts artifacts: "${jsonOutput},${htmlOutput}", fingerprint: true
                    publishHTML([reportDir: '.', reportFiles: htmlOutput, reportName: 'üìä Rapport Trivy', keepAll: true])
                }
            }
        }

        stage('‚ò∏Ô∏è Mise √† jour des manifestes Kubernetes') {
            steps {
                script {
                    echo "üîß Mise √† jour des manifestes Kubernetes..."
                    sh """
                        sed -i 's|<REGISTRY>/springfoyer:latest|${env.DOCKER_IMAGE_FULL}|g' ${env.K8S_MANIFEST_DIR}/deployment.yaml
                        echo "‚úÖ Manifeste mis √† jour avec l'image: ${env.DOCKER_IMAGE_FULL}"
                        ls -la ${env.K8S_MANIFEST_DIR}/
                        cat ${env.K8S_MANIFEST_DIR}/deployment.yaml
                    """
                }
            }
        }

        stage('üöÄ D√©ploiement Kubernetes') {
            steps {
                script {
                    echo "üöÄ D√©ploiement sur Kubernetes..."
                    
                    withCredentials([file(credentialsId: 'kubeconfig-admin', variable: 'KUBECONFIG_FILE')]) {
                        kubernetesDeploy(
                            kubeConfigPath: KUBECONFIG_FILE,
                            manifestDir: env.K8S_MANIFEST_DIR
                        )
                        
                        // Attendre que le d√©ploiement soit pr√™t
                        sh """
                            export KUBECONFIG=${KUBECONFIG_FILE}
                            echo "‚è≥ Attente du d√©ploiement..."
                            kubectl rollout status deployment/springfoyer-deployment --timeout=300s
                            
                            echo "üìä √âtat des d√©ploiements, services et pods:"
                            kubectl get deployments,services,pods -o wide
                            
                            echo "üîç V√©rification du service springfoyer-service:"
                            kubectl get service springfoyer-service
                            
                            echo "‚úÖ Configuration r√©seau:"
                            echo "   - NodePort: 30080"
                            echo "   - Application: ${env.APP_BASE_URL}"
                            echo "   - Health endpoint: ${env.HEALTH_ENDPOINT}"
                        """
                    }
                }
            }
        }

        stage('üìä D√©ploiement Monitoring') {
            steps {
                script {
                    echo "üìä D√©ploiement de Prometheus et Grafana..."
                    
                    withCredentials([file(credentialsId: 'kubeconfig-admin', variable: 'KUBECONFIG_FILE')]) {
                        sh """
                            export KUBECONFIG=${KUBECONFIG_FILE}
                            echo "üìÅ V√©rification des r√©pertoires de stockage..."
                            kubectl get nodes -o wide
                            echo "‚ö†Ô∏è Assurez-vous que les r√©pertoires suivants existent:"
                            echo "  - /mnt/data/prometheus"
                            echo "  - /mnt/data/grafana"
                        """
                        
                        sh """
                            export KUBECONFIG=${KUBECONFIG_FILE}
                            echo "üöÄ D√©ploiement des manifestes de monitoring..."
                            kubectl apply -f monitoring/
                            
                            echo "‚è≥ Attente du d√©marrage des services de monitoring..."
                            kubectl rollout status deployment/prometheus -n monitoring --timeout=300s
                            kubectl rollout status deployment/grafana -n monitoring --timeout=300s
                            
                            echo "üìä √âtat des services de monitoring:"
                            kubectl get all -n monitoring
                        """
                        
                        sh """
                            export KUBECONFIG=${KUBECONFIG_FILE}
                            NODE_IP=\$(kubectl get nodes -o wide | awk 'NR==2{print \$6}')
                            
                            echo "üìä ==============================================="
                            echo "üìä INFORMATIONS D'ACC√àS AU MONITORING"
                            echo "üìä ==============================================="
                            echo "üîç Prometheus: http://\${NODE_IP}:30090"
                            echo "üìà Grafana: http://\${NODE_IP}:30300 (admin/admin123)"
                            echo "üìä ==============================================="
                        """
                    }
                }
            }
        }

        stage('üîç Tests post-d√©ploiement') {
            steps {
                script {
                    echo "üß™ Tests de sant√© de l'application..."
                    
                    withCredentials([file(credentialsId: 'kubeconfig-admin', variable: 'KUBECONFIG_FILE')]) {
                        // Attendre que le d√©ploiement soit disponible
                        timeout(time: 10, unit: 'MINUTES') {
                            sh """
                                export KUBECONFIG=${KUBECONFIG_FILE}
                                echo "‚è≥ Attente de la disponibilit√© du d√©ploiement..."
                                kubectl wait --for=condition=available --timeout=600s deployment/springfoyer-deployment
                            """
                        }
                        
                        // Tests de sant√© avec retry am√©lior√©
                        retry(5) {
                            sleep 20
                            script {
                                def healthStatus = sh(
                                    script: """
                                        export KUBECONFIG=${KUBECONFIG_FILE}
                                        
                                        # V√©rifier que les pods sont pr√™ts
                                        READY_PODS=\$(kubectl get pods -l app=springfoyer -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | wc -w)
                                        echo "Pods pr√™ts: \$READY_PODS"
                                        
                                        if [ "\$READY_PODS" -eq "0" ]; then
                                            echo "‚ùå Aucun pod en cours d'ex√©cution"
                                            kubectl get pods -l app=springfoyer
                                            kubectl logs -l app=springfoyer --tail=20
                                            exit 1
                                        fi
                                        
                                        # Test du health endpoint principal
                                        echo "üîç Test de l'endpoint health..."
                                        curl -f -s --max-time 10 ${env.HEALTH_ENDPOINT} || {
                                            echo "‚ùå Health endpoint non accessible"
                                            
                                            # Debug d√©taill√©
                                            echo "üîç Debug des services:"
                                            kubectl get svc springfoyer-service -o wide
                                            
                                            echo "üîç Debug des endpoints:"
                                            kubectl get endpoints springfoyer-service
                                            
                                            echo "üîç Test de connectivit√© directe aux pods:"
                                            kubectl get pods -l app=springfoyer -o wide
                                            
                                            # Test avec port-forward comme fallback
                                            echo "üîç Test avec port-forward..."
                                            timeout 30s kubectl port-forward svc/springfoyer-service 8080:8080 &
                                            PF_PID=\$!
                                            sleep 5
                                            curl -f -s --max-time 10 http://localhost:8080/actuator/health || echo "Port-forward test failed"
                                            kill \$PF_PID 2>/dev/null || true
                                            
                                            exit 1
                                        }
                                        
                                        echo "‚úÖ Health check r√©ussi"
                                        
                                        # Test optionnel de l'endpoint readiness
                                        echo "üîç Test de l'endpoint readiness..."
                                        curl -f -s --max-time 10 ${env.READINESS_ENDPOINT} && echo "‚úÖ Readiness OK" || echo "‚ö†Ô∏è Readiness non disponible"
                                        
                                        # Test de l'endpoint Prometheus
                                        echo "üîç Test de l'endpoint Prometheus..."
                                        curl -f -s --max-time 10 ${env.APP_BASE_URL}/actuator/prometheus | head -5 && echo "‚úÖ M√©triques Prometheus disponibles" || echo "‚ö†Ô∏è M√©triques Prometheus non disponibles"
                                    """,
                                    returnStatus: true
                                )
                                
                                if (healthStatus != 0) {
                                    error "Tests de sant√© √©chou√©s"
                                }
                            }
                        }
                    }
                    
                    echo "‚úÖ Application d√©ploy√©e et accessible sur ${env.APP_BASE_URL}"
                }
            }
        }
    }

    post {
        always {
            script {
                sh """
                    export DOCKER_CONFIG=/tmp/.docker
                    docker system prune -f || true
                    docker logout || true
                    rm -rf /tmp/.docker || true
                """
                archiveArtifacts artifacts: 'target/*.jar,Dockerfile,trivy-report.json,trivy-report.html,sonar-report-*.html', allowEmptyArchive: true
            }
        }

        success {
            script {
                withCredentials([file(credentialsId: 'kubeconfig-admin', variable: 'KUBECONFIG_FILE')]) {
                    sh """
                        export KUBECONFIG=${KUBECONFIG_FILE}
                        NODE_IP=\$(kubectl get nodes -o wide | awk 'NR==2{print \$6}')
                        
                        echo "üéâ ==============================================="
                        echo "üéâ PIPELINE TERMIN√â AVEC SUCC√àS!"
                        echo "üéâ ==============================================="
                        echo "üì± Application: ${env.APP_BASE_URL}"
                        echo "üîç Health check: ${env.HEALTH_ENDPOINT}"
                        echo "üìä Prometheus: http://\${NODE_IP}:30090"
                        echo "üìà Grafana: http://\${NODE_IP}:30300 (admin/admin123)"
                        echo "üéâ ==============================================="
                    """
                }
            }
        }

        failure {
            script {
                echo "‚ùå Pipeline √©chou√© - analyse des logs"
                withCredentials([file(credentialsId: 'kubeconfig-admin', variable: 'KUBECONFIG_FILE')]) {
                    sh """
                        export KUBECONFIG=${KUBECONFIG_FILE}
                        echo "üîç √âtat des ressources Kubernetes:"
                        kubectl get pods -l app=springfoyer -o wide || true
                        kubectl get svc springfoyer-service || true
                        kubectl get endpoints springfoyer-service || true
                        
                        echo "üîç Logs des pods SpringFoyer:"
                        kubectl logs -l app=springfoyer --tail=50 || true
                        
                        echo "üîç Description des pods en erreur:"
                        kubectl describe pods -l app=springfoyer | grep -A 10 -B 5 "Error\\|Failed\\|Warning" || true
                        
                        echo "üîç √âv√©nements r√©cents:"
                        kubectl get events --sort-by=.metadata.creationTimestamp --field-selector involvedObject.name=springfoyer-deployment || true
                    """ 
                }
            }
        }
    }
}
